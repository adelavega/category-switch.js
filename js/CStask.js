// Generated by CoffeeScript 1.6.3
(function() {
  var Block, IBI, ITI, Session, Trial, blockFactory, blocks, data, instructions, livingPrac, mean, mixedBlock, saveData, sizePrac, trialFactory, trialLength;

  livingPrac = [["alligator", "living"], ["snowflake", "living"], ["bicycle", "living"], ["mushroom", "living"], ["cloud", "living"], ["goldfish", "living"], ["lizard", "living"], ["table", "living"], ["marble", "living"], ["shark", "living"], ["knob", "living"], ["lion", "living"]];

  sizePrac = [["table", "size"], ["knob", "size"], ["pebble", "size"], ["oak", "size"], ["bicycle", "size"], ["coat", "size"], ["shark", "size"], ["lizard", "size"], ["alligator", "size"], ["lion", "size"], ["snowflake", "size"], ["bicycle", "size"], ["shark", "size"], ["lizard", "size"]];

  mixedBlock = [["sparrow", "size"], ["table", "living"], ["lion", "size"], ["sparrow", "living"], ["cloud", "living"], ["alligator", "size"], ["lizard", "size"], ["marble", "living"], ["table", "size"], ["pebble", "size"], ["shark", "living"], ["coat", "living"], ["alligator", "living"], ["pebble", "size"], ["lion", "living"], ["snowflake", "living"], ["lizard", "living"]];

  blocks = [["livingOnly", "Get ready to begin... Only living or non-living", livingPrac], ["sizeOnly", "Get ready for mre trials... Only size trials", sizePrac], ["mixed", "Get ready for more trials... this is a mixed block", mixedBlock]];

  trialLength = 3500;

  ITI = 1000;

  IBI = 4000;

  instructions = ["In each trial of this task, you will see a word that appears with a symbol above it. <br><br>When the symbol is &hearts;, you should decide if the word describes something that is, or could have ever been living, or nonliving. <br><br> When the symbol is &#10021;, you should decide if the word describes something that is smaller or bigger than a soccer ball. <br><br>Press the arrow to continue <br><br><br>", "The words that describe NONliving things are: snowflake, pebble, marble, knob, bicycle, coat, table, and cloud. <br><br>The words that describe LIVING things are: sparrow, mushroom, lizard, goldfish, lion, shark, alligator, and oak. <br><br>The words that describe SMALL things are: snowflake, pebble, marble, knob, sparrow, mushroom, lizard, and goldfish. <br><br>The words that describe BIG things are: bicycle, coat, table, cloud, lion, shark, alligator, and oak. <br><br>Press the right arrow to continue.<br><br>	", "If a item is NON-living press 'F' <br><br>If the item is living, press 'J' <br><br>If the item is smaller than soccer ball press 'F' <br><br>If the item is bigger than soccer ball press 'J' <br><br>"];

  data = [];

  saveData = function(newdata) {
    return data.push([newdata]);
  };

  mean = function(numericArray) {
    var avg, sum;
    sum = numericArray.reduce(function(a, b) {
      return a + b;
    });
    avg = sum / numericArray.length;
    return avg;
  };

  Session = (function() {
    function Session(blocks_in) {
      this.blocks_in = blocks_in;
      this.blockNumber = 0;
      this.max_blocks = this.blocks_in.length;
      this.blocks = blockFactory(this.blocks_in);
    }

    Session.prototype.start = function() {
      $(".btn").addClass('hidden');
      return this.nextBlock();
    };

    Session.prototype.startInstructions = function() {
      this.inst_num = 0;
      return this.nextInstruction();
    };

    Session.prototype.nextInstruction = function() {
      if (this.inst_num > 0) {
        $('#prev').removeClass('hidden');
      }
      if (this.inst_num < instructions.length) {
        $('#tCent').html(instructions[this.inst_num]);
        return this.inst_num += 1;
      } else {
        return this.start();
      }
    };

    Session.prototype.prevInstruction = function() {
      this.inst_num = this.inst_num - 2;
      if (this.inst_num === 0) {
        $('#prev').addClass('hidden');
      }
      $('#tCent').html(instructions[this.inst_num]);
      return this.inst_num += 1;
    };

    Session.prototype.nextBlock = function() {
      var _this = this;
      this.currBlock = this.blocks[this.blockNumber];
      if (this.blockNumber >= this.max_blocks) {
        return this.endSession();
      } else {
        this.blockNumber++;
        return this.currBlock.start((function() {
          return _this.nextBlock();
        }));
      }
    };

    Session.prototype.endSession = function() {
      return $('#done').modal('show');
    };

    return Session;

  })();

  Block = (function() {
    function Block(condition, message, trials_in) {
      this.condition = condition;
      this.message = message;
      this.trials_in = trials_in;
      this.trialNumber = 0;
      this.max_trials = this.trials_in.length;
      this.trials = trialFactory(this.trials_in);
      this.data = [];
    }

    Block.prototype.start = function(endBlock) {
      var _this = this;
      this.endBlock = endBlock;
      $('#tCent').show();
      $('#tCent').text(this.message);
      return setTimeout((function() {
        return _this.nextTrial();
      }), IBI);
    };

    Block.prototype.nextTrial = function() {
      var _this = this;
      this.currTrial = this.trials[this.trialNumber];
      if (this.trialNumber >= this.max_trials) {
        return this.feedback();
      } else {
        this.trialNumber++;
        return this.currTrial.show((function(arg1) {
          return _this.logTrial(arg1);
        }));
      }
    };

    Block.prototype.feedback = function() {
      var goodRTs, n,
        _this = this;
      goodRTs = [
        (function() {
          var _i, _len, _ref, _results;
          _ref = this.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            n = _ref[_i];
            _results.push(n[0]);
          }
          return _results;
        }).call(this)
      ][0];
      while (goodRTs.indexOf('NA') > -1) {
        goodRTs.splice(goodRTs.indexOf('NA'), 1);
      }
      $('#tCent').show();
      $('#tCent').text("Your average reaction time was: " + mean(goodRTs).toString() + "ms");
      return setTimeout((function() {
        return _this.endBlock();
      }), IBI);
    };

    Block.prototype.logTrial = function(trialData) {
      saveData([this.condition].concat(trialData));
      this.data.push(trialData);
      return this.nextTrial();
    };

    return Block;

  })();

  Trial = (function() {
    function Trial(item, judgment) {
      this.item = item;
      this.judgment = judgment;
      this.rt = 'NA';
      this.resp = 'NA';
    }

    Trial.prototype.show = function(endTrial) {
      var _this = this;
      $('#uCent').html(this.processJudgment(this.judgment));
      $('#tCent').text(this.item);
      $('#uCent').show();
      $('#tCent').show();
      this.startTime = (new Date).getTime();
      setTimeout((function() {
        return _this.clear();
      }), trialLength - ITI);
      return setTimeout((function() {
        return endTrial([_this.rt, _this.resp]);
      }), trialLength);
    };

    Trial.prototype.processJudgment = function(judgment) {
      var symbol;
      if (judgment === "living") {
        symbol = "&hearts;";
      } else {
        symbol = "&#10021;";
      }
      return symbol;
    };

    Trial.prototype.clear = function() {
      $('#uCent').hide();
      return $('#tCent').hide();
    };

    Trial.prototype.logResponse = function(resp) {
      this.rt = (new Date).getTime() - this.startTime;
      return this.resp = resp;
    };

    return Trial;

  })();

  trialFactory = function(trials) {
    var n, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = trials.length; _i < _len; _i++) {
      n = trials[_i];
      _results.push(new Trial(n[0], n[1]));
    }
    return _results;
  };

  blockFactory = function(blocks) {
    var n, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = blocks.length; _i < _len; _i++) {
      n = blocks[_i];
      _results.push(new Block(n[0], n[1], n[2]));
    }
    return _results;
  };

  jQuery(function() {
    var currSession;
    currSession = new Session(blocks);
    currSession.startInstructions();
    $("#next").click(function() {
      return currSession.nextInstruction();
    });
    $("#prev").click(function() {
      return currSession.prevInstruction();
    });
    return $(document).keypress(function(event) {
      return currSession.currBlock.currTrial.logResponse(String.fromCharCode(event.keyCode));
    });
  });

}).call(this);
