// Generated by CoffeeScript 1.6.3
(function() {
  var Block, FeedbackTrial, IBI, ITI, Instruction, PracticeBlock, RTFeedbackBlock, Session, Trial, blocks, c, clear_canvas, ctx, data, height, instructions, living, livingPrac, living_col, mean, mixedBlock, multilineText, n, nonliving, nonliving_col, saveData, sizePrac, soccer, soccer_col, trialLength, width, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  livingPrac = [["alligator", "living"], ["snowflake", "nonliving"], ["bicycle", "nonliving"], ["mushroom", "living"]];

  sizePrac = [["table", "bigger"], ["knob", "smaller"], ["pebble", "smaller"], ["oak", "bigger"], ["bicycle", "bigger"]];

  mixedBlock = [["sparrow", "size"], ["table", "living"], ["lion", "size"], ["sparrow", "living"], ["cloud", "living"], ["alligator", "size"], ["lizard", "size"], ["marble", "living"], ["table", "size"], ["pebble", "size"], ["shark", "living"], ["coat", "living"], ["alligator", "living"], ["pebble", "size"], ["lion", "living"], ["snowflake", "living"], ["lizard", "living"]];

  trialLength = 3500;

  ITI = 1000;

  IBI = 1000;

  instructions = ["In this test, you'll see a series of words, one at the time \n\nAbove each word you'll see a symbol \n\nWhen the symbol is   " + String.fromCharCode(10084) + "  decide if the word describes \nsomething that is, or could have ever been living\n\nWhen the symbol is   " + String.fromCharCode(10021) + "  decide if the world describes\nsomething that is smaller or bigger than a soccer ball. \n\n", "\n\nIf you see a   " + String.fromCharCode(10084) + "  , do you decide if the word shown describes:\n\nsomething smaller or bigger than a soccer ball or\n\nsomething that is living or nonliving?", "\n\nIf you see a   " + String.fromCharCode(10021) + "  , do you decide if the word shown describes:\n\nsomething smaller or bigger than a soccer ball or\n\nsomething that is living or nonliving?", "You'll use the 'F' and 'J' keys to respond\nUse your left and right index fingers\n\nWhen you see the  " + String.fromCharCode(10084) + " icon\nPress  'F' to indicate 'non-living'\nPress 'J' to indicate 'living'\n\nWhen you see the  " + String.fromCharCode(10021) + " icon\nPress  'F' to indicate 'smaller than a soccer ball'\nPress 'J' to indicate 'bigger than a soccer ball'", "\n\nWhich key do you press for a item that is \nsmaller than a soccer ball?", "\n\nWhich key do you press for a item that \nis or could have ever been living?", "Okay now its time to practice!\nFor now, we'll only decide if the words described are living or non-living\n\nNON-LIVING things are: \nsnowflake, pebble, marble, knob, bicycle, coat, table, and cloud. \n\nLIVING things are: \nsparrow, mushroom, lizard, goldfish, lion, shark, alligator, and oak. \n\nPlease respond as fast and as accurately as you can!", "Now we're going to practice deciding if words described are\n smaller or bigger than a soccer ball\n\nSMALL things are: \nsnowflake, pebble, marble, knob, sparrow, mushroom, lizard, and goldfish. \n\nBIG things are: \nbicycle, coat, table, cloud, lion, shark, alligator, and oak. \n\nPlease respond as fast and as accurately as you can!"];

  living = new Image();

  living.src = "img/living.png";

  nonliving = new Image();

  nonliving.src = "img/non_living.png";

  living_col = new Image();

  living_col.src = "img/living_blue.png";

  nonliving_col = new Image();

  nonliving_col.src = "img/non_living_blue.png";

  soccer = new Image();

  soccer.src = "img/soccer.png";

  soccer_col = new Image();

  soccer_col.src = "img/soccer_blue.png";

  c = document.getElementById("canvas");

  ctx = c.getContext("2d");

  width = canvas.width;

  height = canvas.height;

  data = [];

  saveData = function(newdata) {
    return data.push([newdata]);
  };

  mean = function(numericArray) {
    var avg, sum;
    sum = numericArray.reduce(function(a, b) {
      return a + b;
    });
    avg = sum / numericArray.length;
    return avg;
  };

  clear_canvas = function() {
    return ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  multilineText = function(txt, x, y, font, lineheight, clear) {
    var i, lines, _results;
    if (lineheight == null) {
      lineheight = 20;
    }
    if (clear == null) {
      clear = true;
    }
    if (clear) {
      clear_canvas();
    }
    ctx.font = font;
    if (x === "center") {
      ctx.textAlign = "center";
      x = canvas.width / 2;
    } else {
      ctx.textAlign = "start";
    }
    if (y === "center") {
      y = canvas.height / 2;
    }
    lines = txt.split('\n');
    i = 0;
    _results = [];
    while (i < lines.length) {
      ctx.fillText(lines[i], x, y + (i * lineheight));
      _results.push(i++);
    }
    return _results;
  };

  Session = (function() {
    function Session(blocks) {
      this.blocks = blocks;
      this.blockNumber = 0;
      this.max_blocks = this.blocks.length;
      this.nextBlock();
    }

    Session.prototype.nextBlock = function() {
      var _this = this;
      this.currBlock = this.blocks[this.blockNumber];
      if (this.blockNumber >= this.max_blocks) {
        return this.endSession();
      } else {
        this.blockNumber++;
        return this.currBlock.start((function(arg1) {
          return _this.exitBlock(arg1);
        }));
      }
    };

    Session.prototype.prevBlock = function() {
      var _this = this;
      if (this.blockNumber > 1) {
        this.blockNumber = this.blockNumber - 2;
      }
      this.currBlock = this.blocks[this.blockNumber];
      this.blockNumber++;
      return this.currBlock.start((function(arg1) {
        return _this.exitBlock(arg1);
      }));
    };

    Session.prototype.exitBlock = function(next) {
      if (next == null) {
        next = true;
      }
      if (next) {
        return this.nextBlock();
      } else {
        return this.prevBlock();
      }
    };

    Session.prototype.buttonClick = function(button) {
      return this.currBlock.buttonClick(button);
    };

    Session.prototype.endSession = function() {
      return $('#done').modal('show');
    };

    return Session;

  })();

  Instruction = (function() {
    function Instruction(message, left_button, right_button, corrResp) {
      this.message = message;
      this.left_button = left_button != null ? left_button : "Back";
      this.right_button = right_button != null ? right_button : "Okay";
      this.corrResp = corrResp != null ? corrResp : null;
    }

    Instruction.prototype.start = function(exitTrial) {
      this.exitTrial = exitTrial;
      multilineText(this.message, 10, 30, "25px Arial", 30);
      if (this.left_button !== false) {
        $('#left').css({
          'visibility': 'visible'
        });
      }
      if (this.right_button != null) {
        $('#right').css({
          'visibility': 'visible'
        });
      }
      $('#left').html(this.left_button);
      return $('#right').html(this.right_button);
    };

    Instruction.prototype.buttonClick = function(button) {
      var _this = this;
      if (this.corrResp != null) {
        if (this.corrResp === button) {
          $('#correct').modal('show');
          this.clearButtons();
          setTimeout((function() {
            return $('#correct').modal('hide');
          }), 1750);
          return setTimeout((function() {
            return _this.exitTrial();
          }), 1750);
        } else {
          return $('#error').modal('show');
        }
      } else {
        this.clearButtons();
        if (button === 'left') {
          return this.exitTrial(false);
        } else if (button === 'right') {
          return this.exitTrial();
        }
      }
    };

    Instruction.prototype.clearButtons = function() {
      $('#left').css({
        'visibility': 'hidden'
      });
      return $('#right').css({
        'visibility': 'hidden'
      });
    };

    return Instruction;

  })();

  Block = (function() {
    function Block(condition, message, trials) {
      this.condition = condition;
      this.message = message;
      this.trials = trials;
      this.trials = trials[0];
      this.trialNumber = 0;
      this.max_trials = this.trials.length;
      this.data = [];
    }

    Block.prototype.start = function(exitBlock) {
      var _this = this;
      this.exitBlock = exitBlock;
      multilineText(this.message, 10, 75, "25px Arial", 75);
      return setTimeout((function() {
        return _this.nextTrial();
      }), IBI);
    };

    Block.prototype.nextTrial = function() {
      var _this = this;
      this.currTrial = this.trials[this.trialNumber];
      if (this.trialNumber >= this.max_trials) {
        return this.endBlock();
      } else {
        this.trialNumber++;
        return this.currTrial.show((function(arg1) {
          return _this.logTrial(arg1);
        }));
      }
    };

    Block.prototype.endBlock = function() {
      return this.exitBlock();
    };

    Block.prototype.logTrial = function(trialData) {
      saveData([this.condition].concat(trialData));
      this.data.push(trialData);
      return this.nextTrial();
    };

    return Block;

  })();

  PracticeBlock = (function(_super) {
    __extends(PracticeBlock, _super);

    function PracticeBlock() {
      _ref = PracticeBlock.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PracticeBlock.prototype.endBlock = function() {
      return this.feedback();
    };

    PracticeBlock.prototype.feedback = function() {
      var accs, n;
      accs = mean([
        (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.data;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            n = _ref1[_i];
            _results.push(n[2]);
          }
          return _results;
        }).call(this)
      ][0]);
      multilineText("You got " + accs * 100..toString() + "% of trials correct", 10, 30, "30px Arial");
      if (accs < 0.75) {
        multilineText("You need to get at least 75% right to continue", 10, 100, "25px Arial", 20, false);
        $('#right').html("Try again");
        this.done = false;
      } else {
        multilineText("Good job, let's continue", 10, 100, "25px Arial", 20, false);
        $('#right').html("Okay");
        this.done = true;
      }
      return $('#right').css({
        'visibility': 'visible'
      });
    };

    PracticeBlock.prototype.buttonClick = function() {
      $('#right').css({
        'visibility': 'hidden'
      });
      if (this.done) {
        return this.exitBlock();
      } else {
        return this.restartBlock();
      }
    };

    PracticeBlock.prototype.restartBlock = function() {
      this.trialNumber = 0;
      this.data = [];
      return this.nextTrial();
    };

    return PracticeBlock;

  })(Block);

  RTFeedbackBlock = (function(_super) {
    __extends(RTFeedbackBlock, _super);

    function RTFeedbackBlock() {
      _ref1 = RTFeedbackBlock.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    RTFeedbackBlock.prototype.endBlock = function() {
      var _this = this;
      this.feedback();
      return setTimeout((function() {
        return _this.exitBlock();
      }), IBI);
    };

    RTFeedbackBlock.prototype.feedback = function() {
      var goodRTs, n;
      goodRTs = [
        (function() {
          var _i, _len, _ref2, _results;
          _ref2 = this.data;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            n = _ref2[_i];
            _results.push(n[0]);
          }
          return _results;
        }).call(this)
      ][0];
      while (goodRTs.indexOf('NA') > -1) {
        goodRTs.splice(goodRTs.indexOf('NA'), 1);
      }
      return multilineText("Your average reaction time was: " + mean(goodRTs).toString() + "ms", 10, 30, "20px Arial");
    };

    return RTFeedbackBlock;

  })(Block);

  Trial = (function() {
    function Trial(item, corrResp) {
      this.item = item;
      this.corrResp = corrResp;
      this.rt = 'NA';
      this.resp = 'NA';
      this.acc = 0;
    }

    Trial.prototype.show = function(endTrial) {
      var _this = this;
      multilineText(this.processJudgment(this.corrResp), "center", canvas.height / 2 - 75, "40px Arial");
      multilineText(this.item, "center", "center", "35px Arial", 20, false);
      this.startTime = (new Date).getTime();
      setTimeout((function() {
        return clear_canvas();
      }), trialLength - ITI);
      return setTimeout((function() {
        return endTrial([_this.rt, _this.resp, _this.acc]);
      }), trialLength);
    };

    Trial.prototype.processJudgment = function(judgment) {
      var symbol;
      if (judgment === "living" || judgment === "nonliving") {
        symbol = String.fromCharCode(10084);
      } else {
        symbol = String.fromCharCode(10021);
      }
      return symbol;
    };

    Trial.prototype.logResponse = function(resp) {
      this.rt = (new Date).getTime() - this.startTime;
      this.resp = resp;
      if (resp === "f") {
        if (this.corrResp === "nonliving" || this.corrResp === "smaller") {
          return this.acc = 1;
        } else {
          return this.acc = 0;
        }
      } else if (resp === "j") {
        if (this.corrResp === "living" || this.corrResp === "bigger") {
          return this.acc = 1;
        } else {
          return this.acc = 0;
        }
      }
    };

    return Trial;

  })();

  FeedbackTrial = (function(_super) {
    __extends(FeedbackTrial, _super);

    function FeedbackTrial(item, corrResp) {
      this.item = item;
      this.corrResp = corrResp;
      if (this.corrResp === "living" || this.corrResp === "nonliving") {
        this.left = nonliving;
        this.left_selected = nonliving_col;
        this.left_size = 75;
        this.right = living;
        this.right_selected = living_col;
        this.right_size = 75;
      } else {
        this.left = soccer;
        this.left_selected = soccer_col;
        this.left_size = 60;
        this.right = soccer;
        this.right_selected = soccer_col;
        this.right_size = 80;
      }
      FeedbackTrial.__super__.constructor.call(this, this.item, this.corrResp);
    }

    FeedbackTrial.prototype.show = function(endTrial) {
      FeedbackTrial.__super__.show.call(this, endTrial);
      ctx.drawImage(this.left, 10, canvas.height / 2 - 100, this.left_size, this.left_size);
      return ctx.drawImage(this.right, canvas.width - 100, canvas.height / 2 - 85, this.right_size, this.right_size);
    };

    FeedbackTrial.prototype.logResponse = function(resp) {
      FeedbackTrial.__super__.logResponse.call(this, resp);
      if (resp === "f") {
        return ctx.drawImage(this.left_selected, 10, canvas.height / 2 - 100, this.left_size, this.left_size);
      } else if (resp === "j") {
        return ctx.drawImage(this.right_selected, canvas.width - 100, canvas.height / 2 - 85, this.right_size, this.right_size);
      }
    };

    return FeedbackTrial;

  })(Trial);

  blocks = [
    new Instruction(instructions[0], false), new Instruction(instructions[1], "Bigger/smaller<br> than soccer ball", "Living/non-living", "right"), new Instruction(instructions[2], "Bigger/smaller<br> than soccer ball", "Living/non-living", "left"), new Instruction(instructions[3]), new Instruction(instructions[4], "F", "J", "left"), new Instruction(instructions[5], "F", "J", "right"), new Instruction(instructions[6], false, "Let's practice"), new PracticeBlock("livingPrac", "Get ready...\n10 words coming up", [
      (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = livingPrac.length; _i < _len; _i++) {
          n = livingPrac[_i];
          _results.push(new FeedbackTrial(n[0], n[1]));
        }
        return _results;
      })()
    ]), new Instruction(instructions[7], false, "Let's practice"), new PracticeBlock("sizePrac", "Get ready...\n10 words coming up", [
      (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = sizePrac.length; _i < _len; _i++) {
          n = sizePrac[_i];
          _results.push(new FeedbackTrial(n[0], n[1]));
        }
        return _results;
      })()
    ])
  ];

  jQuery(function() {
    var currSession;
    currSession = new Session(blocks);
    $("#right").click(function() {
      return currSession.buttonClick('right');
    });
    $("#left").click(function() {
      return currSession.buttonClick('left');
    });
    $("#continue").click(function() {
      return currSession.buttonClick('continue');
    });
    return $(document).keypress(function(event) {
      return currSession.currBlock.currTrial.logResponse(String.fromCharCode(event.keyCode));
    });
  });

}).call(this);
