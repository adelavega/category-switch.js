// Generated by CoffeeScript 1.6.3
(function() {
  var ITI, Session, Trial, asTrials, csPrac, instructions, trialFactory, trialLength;

  asTrials = [["left", 0], ["right", 1], ["right", 0], ["left", 1]];

  csPrac = [["alligator", "living"], ["snowflake", "living"], ["bicycle", "living"], ["mushroom", "living"], ["cloud", "living"], ["goldfish", "living"], ["lizard", "living"], ["table", "living"], ["marble", "living"], ["shark", "living"], ["knob", "living"], ["lion", "living"]];

  trialLength = 2000;

  ITI = 1000;

  instructions = ["In each trial of this task, you will see a word that appears with a symbol above it. <br><br>When the symbol is &hearts;, you should decide if the word describes something that is, or could have ever been living, or nonliving. <br><br> When the symbol is &#10021;, you should decide if the word describes something that is smaller or bigger than a soccer ball. <br><br>Press the arrow to continue <br><br><br>", "The words that describe NONliving things are: snowflake, pebble, marble, knob, bicycle, coat, table, and cloud. <br><br>The words that describe LIVING things are: sparrow, mushroom, lizard, goldfish, lion, shark, alligator, and oak. <br><br>The words that describe SMALL things are: snowflake, pebble, marble, knob, sparrow, mushroom, lizard, and goldfish. <br><br>The words that describe BIG things are: bicycle, coat, table, cloud, lion, shark, alligator, and oak. <br><br>Press the right arrow to continue.<br><br>	"];

  Session = (function() {
    function Session(trials_in) {
      this.trials_in = trials_in;
      this.trialNumber = 0;
      this.max_trials = this.trials_in.length;
      this.trials = trialFactory(this.trials_in);
    }

    Session.prototype.start = function() {
      var _this = this;
      $(".btn").addClass('hidden');
      $('#tCent').text('READY?');
      return setTimeout((function() {
        return _this.countDown(3);
      }), 1000);
    };

    Session.prototype.countDown = function(n) {
      var _this = this;
      $('#tCent').text(n);
      if (n > 0) {
        return setTimeout((function() {
          return _this.countDown(n - 1);
        }), 1000);
      } else {
        return this.nextTrial();
      }
    };

    Session.prototype.startInstructions = function() {
      this.inst_num = 0;
      return this.nextInstruction();
    };

    Session.prototype.nextInstruction = function() {
      if (this.inst_num > 0) {
        $('#prev').removeClass('hidden');
      }
      if (this.inst_num < instructions.length) {
        $('#tCent').html(instructions[this.inst_num]);
        return this.inst_num += 1;
      } else {
        return this.start();
      }
    };

    Session.prototype.prevInstruction = function() {
      this.inst_num = this.inst_num - 2;
      if (this.inst_num === 0) {
        $('#prev').addClass('hidden');
      }
      $('#tCent').html(instructions[this.inst_num]);
      return this.inst_num += 1;
    };

    Session.prototype.nextTrial = function() {
      var _this = this;
      this.currTrial = this.trials[this.trialNumber];
      if (this.trialNumber >= this.max_trials) {
        return this.endSession();
      } else {
        this.currTrial.show();
        setTimeout((function() {
          return _this.currTrial.clear();
        }), trialLength - ITI);
        return setTimeout((function() {
          return _this.endTrial();
        }), trialLength);
      }
    };

    Session.prototype.endTrial = function() {
      this.data += [this.currTrial.rt, this.currTrial.resp];
      this.trialNumber++;
      return this.nextTrial();
    };

    Session.prototype.endSession = function() {
      return $('#done').modal('show');
    };

    return Session;

  })();

  Trial = (function() {
    function Trial(item, judgment) {
      this.item = item;
      this.judgment = judgment;
    }

    Trial.prototype.show = function() {
      $('#uCent').html(this.processJudgment(this.judgment));
      $('#tCent').text(this.item);
      $('#uCent').show();
      $('#tCent').show();
      return this.startTime = (new Date).getTime();
    };

    Trial.prototype.processJudgment = function(judgment) {
      var symbol;
      if (judgment === "living") {
        symbol = "&hearts;";
      } else {
        symbol = "&#10021;";
      }
      return symbol;
    };

    Trial.prototype.clear = function() {
      $('#uCent').hide();
      return $('#tCent').hide();
    };

    Trial.prototype.logResponse = function(resp) {
      alert(this.rt);
      if (this.resp == null) {
        this.rt = (new Date).getTime() - this.startTime;
        return this.resp = resp;
      }
    };

    return Trial;

  })();

  trialFactory = function(trials) {
    var n, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = trials.length; _i < _len; _i++) {
      n = trials[_i];
      _results.push(new Trial(n[0], n[1]));
    }
    return _results;
  };

  jQuery(function() {
    var currSession;
    currSession = new Session(csPrac);
    currSession.startInstructions();
    $("#next").click(function() {
      return currSession.nextInstruction();
    });
    $("#prev").click(function() {
      return currSession.prevInstruction();
    });
    return $(document).keypress(function(event) {
      return currSession.currTrial.logResponse(String.fromCharCode(event.keyCode));
    });
  });

}).call(this);
